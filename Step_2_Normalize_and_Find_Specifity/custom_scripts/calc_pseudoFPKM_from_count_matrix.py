import argparse
import numpy as np

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)

parser.add_argument('-d', "--deseq2",
                    dest='deseq_file',
                    required=True,
                    help="A matrix, output from DESeq2's normalization method.")


# Us this for a file containing mean of the fragment length distribution, once we fix the NAS
# parser.add_argument('-d', "--deseq2",
#                    dest='deseq_file',
#                    required=True,
#                    help="A matrix, output from DESeq2's normalization method.")



parser.add_argument('-j', "--gtf_json",
                    dest='gtf_json_file',
                    required=True,
                    help="A gtf_json file, generated by gtf_to_json.")

args = parser.parse_args()


def createseqlendict(json_file):
    """ Return a dictionary of Gene and transcript names as keys with lengths as values. 
    """
    
    return {}    


length_dict = createseqlendict(args.gtf_json_file)

studies = []

# Get the column titles from the matrix. 
matrix_file_obj = open(args.deseq_file  ,"r")
col_titles = matrix_file_obj.readline().split()
matrix_file_obj.close()


col_names      = ["SeqID"] + [x.split(".")[0] for x in col_titles]
col_data_types = ["S80"] + ["f4" for x in col_titles]

#print(build_import_names)
#print(build_import_str)

deseq2_matrix = np.loadtxt(
    args.deseq_file, skiprows=1, 
    dtype={
        'names':   col_names,
        'formats': col_data_types
    }
)

#print(deseq2_matrix.shape)
#print(type(deseq2_matrix))
#print(np.sum(deseq2_matrix["ERR023145"] ))

col_sums = {}
for col_name in col_names[1:]:
    col_sums.update( 
      {col_name: np.sum(deseq2_matrix[col_name]) }
    )

for row in deseq2_matrix:
    # Get sequence length 
    seq_id = row[0]
    # Skip first col  because it is row title
    for i in range(1, len(col_names)): 
        x_i = row[i]
       
        if x_i > 0:
            #print(x_i, i)
            col_name = col_names[i]
            N = col_sums[col_name]
            u_fld = 100

            FPKM = x_i / ( ( u_fld/10.0e3 ) *  ( N / 10.0e3  ) )
            print( "\t".join([ seq_id.decode('ascii'), col_name, str(round(FPKM, 5))]) )

    
